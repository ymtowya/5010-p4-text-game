package model.dungeon;

import java.util.Map;
import java.util.Set;
import model.Direction;
import model.accessory.ItemHolder;
import model.accessory.Treasure;
import model.creature.Otyugh;
import model.graph.Coordinate;

/**
 * This interface represents the dungeon's map. It offers a basic model
 * of the dungeon and its affiliates.
 *
 */
public interface DungeonMap {
  /**
   * Find the treasure map at certain location.
   *
   * @param c Coordinate of the location
   * @return map of treasures
   */
  Map<Treasure, Integer> getTreasuresAt(Coordinate c);
  
  /**
   * Determine if the player at position given can walk towards given direction.
   *
   * @param c coordinate
   * @param d direction
   * @return true if can walk, false otherwise
   */
  boolean canWalk(Coordinate c, Direction d);
  
  /**
   * Get a set of walkable directions.
   *
   * @param c coordinate
   * @return set of walkable directions
   */
  Set<Direction> getDirectionsAt(Coordinate c);
  
  /**
   * Set the given coordinates with given treasures.
   *
   * @param trs map of coordinate and its treasures
   * @return true if set success, false if otherwise
   */
  boolean setTreasures(Map<Coordinate, Map<Treasure, Integer>> trs);
  
  /**
   * Get the connectivity of the map.
   *
   * @return the connectivity
   */
  int getConnectivity();
  
  /**
   * Tell if the map is wrapped.
   *
   * @return true if wrapped, false otherwise
   */
  boolean isWrapped();
  
  /**
   * Get the start.
   *
   * @return start coordinate
   */
  Coordinate getStart();
  
  /**
   * Get the end.
   *
   * @return end coordinate
   */
  Coordinate getEnd();
  
  /**
   * Set the start coordinate.
   *
   * @param s new start coordinate
   */
  void setStart(Coordinate s);
  
  /**
   * Set the end coordinate.
   *
   * @param e new end coordinate
   */
  void setEnd(Coordinate e);
  
  /**
   * Tell the count of caves.
   *
   * @return amount of caves
   */
  int getCaveCount();
  
  /**
   * Get the amount of tunnels.
   *
   * @return amount of tunnels
   */
  int getTunnelCount();
  
  /**
   * Set directions of each location by adjs array.
   *
   * @param adjs array generated by generator
   */
  void setByAdjMap(boolean[][][] adjs);
  
  /**
   * Get row numbers.
   *
   * @return number of rows
   */
  int getRows();
  
  /**
   * Get column numbers.
   *
   * @return number of columns
   */
  int getCols();
  
  /**
   * Tell if it is a cave.
   *
   * @param c coordinate
   * @return true if it is a cave, false otherwise
   */
  boolean isCave(Coordinate c);
  
  /**
   * Clear the treasures of certain location.
   *
   * @param c location coordinate
   */
  void removeTreauseAt(Coordinate c);
  
  Coordinate getNextCoord(Coordinate c, Direction d);
  
  Direction getTunnelAnotherDirection(Coordinate c, Direction d);
  
  Set<Otyugh> getOtyughs();
  
  boolean hasOtyughAt(Coordinate c);
  
  Otyugh getOtyughAt(Coordinate c);
  
  ItemHolder getHolderAt(Coordinate c);
}
